<p><strong>Build()</strong> &ndash; function that allows you to use EDP Implementation for your Build pipeline.</p>
<p><em>All values of different parameters which are used during pipeline execution are stored in Map "context".</em></p>
<p><strong>Build pipeline consists of several steps:</strong></p>
<p><strong><em>On master:</em></strong></p>
<ul>
<li>Initialization of all objects(Platform, Job, GitInfo, Nexus, Sonar, Application, StageFactory) and loading default implementations of EDP stages.</li>
</ul>
<p><strong><em>On particular slave</em></strong> which depends on build tool:</p>
<ul>
<li>Creating work dir for application sources</li>
<li>Loading build tool implementation for particular application</li>
<li>Run in a loop all stages(From) and run them either in parallel or one by one</li>
</ul>
<p><strong><h2>EDP Pipelines library description</h2></strong></p>
<p><em>Using in pipelines - @Library(['edp-library-pipelines@version']) _</em></p>
<p><u>The following enums, classes, interfaces and their methods can be used separately from the EDP Pipelines library function:</u></p>
<p><strong>Enums:</strong></p>
<p><em>PlatformType</em>:</p>
<ul>
<li>OPENSHIFT</li>
<li>KUBERNETES</li>
</ul>
<p><em>JobType</em>:</p>
<ul>
<li>CODEREVIEW</li>
<li>BUILD</li>
<li>DEPLOY</li>
</ul>
<p><em>BuildToolType</em></p>
<ul>
<li>MAVEN</li>
<li>GRADLE</li>
<li>NPM</li>
<li>DOTNET</li>
</ul>
<p>&nbsp;</p>
<p><strong>Interfaces:</strong></p>
<p><strong><em>Platform()</em></strong> - which contains methods for working with platform CLI. At the moment only Openshift is supported.</p>
<ul>
<li><strong>Properties:</strong></li>
</ul>
<p>Script script - Object with type script, in most cases if class created from Jenkins pipelines it is "this"</p>
<ul>
<li><strong>Methods:</strong></li>
</ul>
<p>getJsonPathValue(String k8s_kind, String k8s_kind_name, String jsonPath): return String value of specific parameter of particular object using jsonPath utility</p>
<ul>
<li><strong>Properties:</strong></li>
</ul>
<p>Script script - Object with type script, in most cases if class created from Jenkins pipelines it is "this"</p>
<p>Nexus object - Object of class Nexus. See description below</p>
<ul>
<li><strong>Methods:</strong></li>
</ul>
<p>init: return parameters of buildTool which are needed for running stages</p>
<ul>
<li><strong>Example:</strong></li>
</ul>
<code>
&nbsp;&nbsp;context.buildTool = new BuildToolFactory().getBuildToolImpl(context.application.config.build_tool, this, context.nexus)<br/>
&nbsp;&nbsp;context.buildTool.init()<br/>
</code>
<p><strong>Classes:</strong></p>
<p><strong><em>PlatformFactory()</em></strong> - Class which contains methods getting implementation of CLI of platform. At the moment Openshift and Kubernetes are supported.</p>
<ul>
<li><strong>Methods:</strong></li>
</ul>
<p>getPlatformImpl(PlatformType platform, Script script): return Class Platform</p>
<ul>
<li><strong>Example:</strong></li>
</ul>
<code>&nbsp;&nbsp;context.platform = new PlatformFactory().getPlatformImpl(this)</code>
<p><strong><em>Application(String name, Platform platform, Script script)</em></strong> - Class which describe the application object</p>
<ul>
<li><strong>Properties</strong>:</li>
</ul>
<p>Script script - Object with type script, in most cases if class created from Jenkins pipelines it is "this"</p>
<p>Platform platform - Object of a class Platform()</p>
<p>String name - Name for the application for creating object</p>
<p>Map config - Map of configuration settings for particular application</p>
<p>String version - Application version, initially empty. Is set on get-version step.</p>
<p>String deployableModule - The name of deployable module for multi module applications, initially empty.</p>
<p>String buildVersion - Version of built artifact, contains build number of Job initially empty</p>
<p>String deployableModuleDir - The name of deployable module directory for multi module applications, initially empty.</p>
<p>Array imageBuildArgs - List of arguments for building application Docker image</p>
<ul>
<li><strong>Methods</strong>:</li>
</ul>
<p>setConfig(String gitAutouser, String gitHost, String gitSshPort, String gitProject): set the config property with values from config map</p>
<ul>
<li><strong>Example</strong>:</li>
</ul>
<code>
&nbsp;&nbsp;context.application = new Application(context.job, context.git.project, context.platform, this)<br/>
&nbsp;&nbsp;context.application.setConfig(context.git.autouser, context.git.host, context.git.sshPort, context.git.project)<br/>
</code>
<p><strong><em>Job(type: JobType.value, platform: Platform, script: Script)</em></strong> - Class which describe the Git tool</p>
<ul>
<li><strong>Properties</strong>:</li>
</ul>
<p>Script script - Object with type script, in most cases if class created from Jenkins pipelines it is "this"</p>
<p>Platform platform - Object of a class Platform()</p>
<p>JobType.value type</p>
<p>String deployTemplatesDirectory - The name of the directory in application repository, where deploy templates are located. Can be set for particular Job through DEPLOY_TEMPLATES_DIRECTORY parameter</p>
<p>String edpName - The name of the EDP Project</p>
<p>Map stages - Contains all stages i JSON format which is retrieved from Jenkins job env variable</p>
<p>String envToPromote - The name of the environment for promoting images.</p>
<p>Boolean promoteImages - Defines whether images should be promoted or not.</p>
<ul>
<li><strong>Methods</strong>:</li>
</ul>
<p>getParameterValue(String parameter, String defaultValue = null): return parameter of ENV variable of Jenkins job</p>
<p>init(): set all the properties of Job object</p>
<p>setDisplayName(String displayName): set display name of the Jenkins job</p>
<p>setDescription(String description, Boolean addDescription = false): set new or add to existing description of the Jenkins job</p>
<p>printDebugInfo(Map context): print context info to log of Jenkins job</p>
<p>runStage(String stage_name, Map context): run the particular stage according to its name</p>
<ul>
<li><strong>Example</strong>:</li>
</ul>
<code>
&nbsp;&nbsp;context.job = new Job(JobType.CODEREVIEW.value, context.platform, this)<br/>
&nbsp;&nbsp;context.job.init()<br/>
&nbsp;&nbsp;context.job.printDebugInfo(context)<br/>
&nbsp;&nbsp;context.job.setDisplayName("test")<br/>
&nbsp;&nbsp;context.job.setDescription("Name: ${context.application.config.name}")<br/>
</code>
<p><strong><em>GitInfo(Job job, Platform platform, Script script)</em></strong> - Class which describe the Git tool</p>
<ul>
<li><strong>Properties</strong>:</li>
</ul>
<p>Script script - Object with type script, in most cases if class created from Jenkins pipelines it is "this"</p>
<p>Platform platform - Object of a class Platform()</p>
<p>Job job - Object of a class Job()</p>
<p>String credentialsId - Credential Id in Jenkins for Git</p>
<p>String autouser - Username of autouser in Git for integration with Jenkins</p>
<p>String host - Git host</p>
<p>String project - project name of built application</p>
<p>String branch - branch to build application from</p>
<p>String changeNumber - change number of Git commit</p>
<p>String changeName - change name of Git commit</p>
<p>String refspecName - refspecName of Git commit</p>
<p>String sshPort - git ssh port number</p>
<p>String patchsetNumber - patchsetNumber of Git commit</p>
<ul>
<li><strong>Methods</strong>:</li>
</ul>
<p>init(): set all the properties of Git object</p>
<ul>
<li><strong>Example</strong>:</li>
</ul>
<code>
&nbsp;&nbsp;context.git = new GitInfo(context.job, context.platform, this)<br/>
&nbsp;&nbsp;context.git.init()<br/>
</code>
<p><strong><em>Nexus(Job job, Platform platform, Script script)</em></strong> - Class which describe the Nexus tool</p>
<ul>
<li><strong>Properties</strong>:</li>
</ul>
<p>Script script - Object with type script, in most cases if class created from Jenkins pipelines it is "this"</p>
<p>Platform platform - Object of a class Platform()</p>
<p>Job job - Object of a class Job()</p>
<p>String autouser - Username of autouser in Nexus for integration with Jenkins</p>
<p>String credentialsId - Credential Id in Jenkins for Nexus</p>
<p>String host - Nexus host</p>
<p>String port - Nexus http(s) port</p>
<p>String repositoriesUrl - Base URL of repositories in Nexus</p>
<p>String restUrl - URL of Rest API</p>
<ul>
<li><strong>Methods</strong>:</li>
</ul>
<p>init(): set all the properties of Nexus object</p>
<ul>
<li><strong>Example</strong>:</li>
</ul>
<code>
&nbsp;&nbsp;context.nexus = new Nexus(context.job, context.platform, this)<br/>
&nbsp;&nbsp;context.nexus.init()<br/>
</code>
<p><strong><em>Sonar(Job job, Platform platform, Script script)</em></strong> - Class which describe the Sonar tool</p>
<ul>
<li><strong>Properties</strong>:</li>
</ul>
<p>Script script - Object with type script, in most cases if class created from Jenkins pipelines it is "this"</p>
<p>Platform platform - Object of a class Platform()</p>
<p>Job job - Object of a class Job()</p>
<p>String route - External route of the sonar application</p>
<ul>
<li><strong>Methods</strong>:</li>
</ul>
<p>init(): set all the properties of Sonar object</p>
<ul>
<li><strong>Example</strong>:</li>
</ul>
<code>
&nbsp;&nbsp;context.sonar = new Sonar(context.job, context.platform, this)<br/>
&nbsp;&nbsp;context.sonar.init()<br/>
</code>
<p>&nbsp;</p>
<p><strong><h2>EDP Stages library description</h2></strong></p>
<p><em>Using in pipelines - @Library(['edp-library-stages@version']) _</em></p>
<p><u>The following enums, classes, interfaces and their methods can be used separately from the EDP Stages library function:</u></p>
<p><strong>Enums:</strong></p>
<p><em>ProjectType</em>:</p>
<ul>
<li>APPLICATION</li>
<li>AUTOTESTS</li>
<li>LIBRARY</li>
</ul>
<p><strong>Classes</strong>:</p>
<p><strong><em>StageFactory()</em></strong> - Class which contains methods getting implementation of particular stage either EDP from shared library or custom from application repository.</p>
<ul>
<li><strong>Properties</strong>:</li>
</ul>
<p>Script script - Object with type script, in most cases if class created from Jenkins pipelines it is "this"</p>
<p>Map stages - Map of stages implementations</p>
<ul>
<li><strong>Methods</strong>:</li>
</ul>
<p>loadEdpStages(): return list of Classes that describes EDP stages implementations</p>
<p>loadCustomStages(String directory): return list of Classes that describes EDP custom stages from application repository from "directory". "directory" should be absolute path to files with classes of custom stages implementations. Should be run from slave agent.</p>
<p>add(Class clazz): register class for some particular stage in stages map of StageFactory class</p>
<p>getStage(String name, String buildTool, String type): return object of the class for particular stage from stages property based on stage name and buildTool, type of application</p>
<ul>
<li><strong>Example</strong>:</li>
</ul>
<code>
&nbsp;&nbsp;context.factory = new StageFactory(script: this)<br/>
&nbsp;&nbsp;context.factory.loadEdpStages().each() { context.factory.add(it) }<br/>
&nbsp;&nbsp;context.factory.loadCustomStages("${context.workDir}/stages").each() { context.factory.add(it) }<br/>
&nbsp;&nbsp;context.factory.getStage(stageName.toLowerCase(),context.application.config.build_tool.toLowerCase(),context.application.config.type).run(context)<br/>
</code>
<p><strong><em>Each edp stages implementation has run method which as input parameter require to pass context map with different keys. Some stage can implement logic for several build tools and application type, some of them are specific. You will find full description below.</em></strong></p>
<br>
<p><strong><h3>Stages:</h3></strong></p>
<p><strong><em><h3>Checkout:</h3></em></strong></p>
<p>name = "checkout",</p>
<p>buildTool = ["maven", "npm", "dotnet","gradle"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>StageFactory context.factory</li>
<li>String context.git.branch</li>
<li>String context.git.credentialsId</li>
<li>String context.application.config.cloneUrl</li>
</ul>
<p><strong><em><h3>Git Checkout:</h3></em></strong></p>
<p>name = "gerrit-checkout",</p>
<p>buildTool = ["maven", "npm", "dotnet","gradle"]</p>
<p>type = [ProjectType.APPLICATION, ProjectType.AUTOTESTS, ProjectType.LIBRARY]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>StageFactory context.factory</li>
<li>String context.git.changeName</li>
<li>String context.git.refspecName</li>
<li>String context.git.credentialsId</li>
<li>String context.application.config.cloneUrl</li>
</ul>
<p><strong><em><h3>Compile:</h3></em></strong></p>
<p>name = "compile"</p>
<p>buildTool = ["dotnet"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.buildTool.sln_filename</li>
</ul>
<p>output:</p>
<ul>
<li>String context.buildTool.sln_filename</li>
</ul>
<p>&nbsp;</p>
<p>buildTool = ["gradle"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.buildTool.command</li>
<li>String context.nexus.credentialsId</li>
</ul>
<p>buildTool = ["maven"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.buildTool.command</li>
<li>String context.nexus.credentialsId</li>
</ul>
<p>buildTool = ["npm"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.nexus.credentialsId</li>
<li>String context.buildTool.groupRepository</li>
</ul>
<p><strong><em><h3>Get version:</h3></em></strong></p>
<p>name = "get-version"</p>
<p>buildTool = ["dotnet"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>Map(empty) context.application</li>
<li>String context.git.branch</li>
<li>Job context.job</li>
</ul>
<p>output:</p>
<ul>
<li>String context.application.deplyableModule</li>
<li>String context.application.deplyableModuleDir</li>
<li>String context.application.version</li>
<li>String context.application.buildVersion</li>
</ul>
<p>buildTool = ["gradle"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.nexus.credentialsId</li>
<li>String context.buildTool.command</li>
<li>Job context.job</li>
<li>String context.git.branch</li>
</ul>
<p>output:</p>
<ul>
<li>String context.application.deplyableModuleDir</li>
<li>String context.application.version</li>
<li>String context.application.buildVersion</li>
</ul>
<p>&nbsp;</p>
<p>buildTool = ["maven"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.nexus.credentialsId</li>
<li>String context.buildTool.command</li>
<li>Job context.job</li>
<li>String context.git.branch</li>
</ul>
<p>output:</p>
<ul>
<li>String context.application.deplyableModule</li>
<li>String context.application.deplyableModuleDir</li>
<li>String context.application.version</li>
<li>String context.application.buildVersion</li>
</ul>
<p>buildTool = ["npm"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>Job context.job</li>
<li>String context.git.branch</li>
</ul>
<p>output:</p>
<ul>
<li>String context.application.deplyableModuleDir</li>
<li>String context.application.version</li>
<li>String context.application.buildVersion</li>
</ul>
<p><strong><em><h3>Tests:</h3></em></strong></p>
<p>name = "tests"</p>
<p>buildTool = ["dotnet"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
</ul>
<p>buildTool = ["gradle"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.nexus.credentialsId</li>
<li>String context.buildTool.command</li>
</ul>
<p>buildTool = ["maven"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.buildTool.command</li>
</ul>
<p>type = [ProjectType.AUTOTESTS]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.buildTool.command</li>
<li>String context.application.config.report_framework</li>
</ul>
<p>buildTool = ["npm"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
</ul>
<p><strong><em><h3>Sonar:</h3></em></strong></p>
<p>name = "sonar"</p>
<p>buildTool = ["dotnet"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.job.type</li>
<li>String context.application.name</li>
<li>String context.buildTool.sln_filename</li>
<li>String context.sonar.route</li>
<li>String context.git.changeName(Only for codereview pipeline)</li>
<li>String context.git.branch(Only for build pipeline)</li>
</ul>
<p>buildTool = ["gradle"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.job.type</li>
<li>String context.nexus.credentialsId</li>
<li>String context.buildTool.command</li>
<li>String context.application.name</li>
<li>String context.sonarRoute</li>
<li>String context.git.changeName(Only for codereview pipeline)</li>
<li>String context.git.branch(Only for build pipeline)</li>
</ul>
<p>buildTool = ["maven"]</p>
<p>type = [ProjectType.APPLICATION, ProjectType.AUTOTESTS, ProjectType.LIBRARY]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.job.type</li>
<li>String context.nexus.credentialsId</li>
<li>String context.application.name</li>
<li>String context.buildTool.command</li>
<li>String context.sonar.route</li>
<li>String context.git.changeName(Only for codereview pipeline)</li>
<li>String context.git.branch(Only for build pipeline)</li>
</ul>
<p>buildTool = ["npm"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.job.type</li>
<li>String context.sonar.route</li>
<li>String context.application.name</li>
<li>String context.git.changeName(Only for codereview pipeline)</li>
<li>String context.git.branch(Only for build pipeline)</li>
</ul>
<p><strong><em><h3>Build:</h3></em></strong></p>
<p>name = "build"</p>
<p>buildTool = ["gradle"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.buildTool.command</li>
<li>String context.nexus.credentialsId</li>
</ul>
<p>buildTool = ["maven"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.buildTool.command</li>
<li>String context.nexus.credentialsId</li>
</ul>
<p>buildTool = ["npm"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.nexus.credentialsId</li>
<li>String context.buildTool.groupRepository</li>
</ul>
<p><strong><em><h3>Build Docker Image:</h3></em></strong></p>
<p>name = "build-image"</p>
<p>buildTool = ["dotnet"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.application.deployableModule</li>
<li>String context.application.deployableModuleDir</li>
<li>String context.application.name</li>
<li>String context.application.config.language</li>
<li>String context.application.buildVersion</li>
<li>Boolean context.job.promoteImages</li>
<li>String context.job.envToPromote</li>
</ul>
<p>buildTool = ["gradle"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.application.deployableModule</li>
<li>String context.application.deployableModuleDir</li>
<li>String context.application.name</li>
<li>String context.application.config.language</li>
<li>String context.application.buildVersion</li>
<li>Boolean context.job.promoteImages</li>
<li>String context.job.envToPromote</li>
</ul>
<p>buildTool = ["maven"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.application.deployableModule</li>
<li>String context.application.deployableModuleDir</li>
<li>String context.application.name</li>
<li>String context.application.config.language</li>
<li>String context.application.buildVersion</li>
<li>Boolean context.job.promoteImages</li>
<li>String context.job.envToPromote</li>
</ul>
<p>buildTool = ["npm"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.application.deployableModule</li>
<li>String context.application.deployableModuleDir</li>
<li>String context.application.name</li>
<li>String context.application.config.language</li>
<li>String context.application.buildVersion</li>
<li>Boolean context.job.promoteImages</li>
<li>String context.job.envToPromote</li>
</ul>
<p><strong><em><h3>Push:</h3></em></strong></p>
<p>name = "push"</p>
<p>buildTool = ["dotnet"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.git.project</li>
<li>String context.buildTool.sln_filename</li>
<li>String context.buildTool.snugetApiKey</li>
<li>String context.buildTool.hostedRepository</li>
</ul>
<p>buildTool = ["gradle"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.nexus.credentialsId</li>
<li>String context.application.version</li>
<li>String context.buildTool.hostedRepository</li>
<li>String context. buildTool.settings</li>
</ul>
<p>buildTool = ["maven"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.nexus.credentialsId</li>
<li>String context.application.version</li>
<li>String context.buildTool.hostedRepository</li>
<li>String context.buildTool.command</li>
</ul>
<p>buildTool = ["npm"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.nexus.credentialsId</li>
<li>String context.buildTool.hostedRepository</li>
<li>String context.git.autouser</li>
</ul>
<p><strong><em><h3>Git tag:</h3></em></strong></p>
<p>name = "git-tag"</p>
<p>buildTool = ["maven", "npm", "dotnet","gradle"]</p>
<p>type = [ProjectType.APPLICATION]</p>
<p>context required:</p>
<ul>
<li>String context.workDir</li>
<li>String context.git.credentialsId</li>
<li>String context.git.sshPort</li>
<li>String context.git.host</li>
<li>String context.git.autouser</li>
<li>String context.application.buildVersion</li>
</ul>

<h1>How to redefine or extend EDP Pipeline stages library</h1>
<ul>
<li>Create &ldquo;stage&rdquo; folder in you App repository.</li>
<li>Create Groovy file with meaningful name for custom stage description. For instance &ndash; CustomBuildMavenApplication.groovy</li>
<li>Describe stage logic. Follow the structure:</li>
<li>Redefinement:</li>
<code>
import com.epam.edp.stages.ProjectType<br />
import com.epam.edp.stages.Stage<br />
@Stage(name = "compile", buildTool = "maven", type = ProjectType.APPLICATION)<br />
class CustomBuildMavenApplication {<br />
&nbsp;&nbsp;&nbsp; Script script<br />
&nbsp;&nbsp;&nbsp; void run(context) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; script.sh "echo 'Your custom logic of the stage'"<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
return CustomBuildMavenApplication<br />
</code>
<p>&nbsp;</p>
<li>Extending:</li>
<code>
import com.epam.edp.stages.ProjectType<br />
import com.epam.edp.stages.Stage<br />
@Stage(name = "new-stage", buildTool = "maven", type = ProjectType.APPLICATION)<br />
class NewStageMavenApplication {<br />
&nbsp;&nbsp;&nbsp; Script script<br />
&nbsp;&nbsp;&nbsp; void run(context) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; script.sh "echo 'Your custom logic of the stage'"<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
return NewStageMavenApplication<br />
</code>
</ul>

<h1>Using EDP stages library in your own pipeline</h1>
<p>You pipeline have to fit some requirements in order to use EDP Stages:</p>
<ul>
<li>You need to import library - @Library(['edp-library-stages']) _</li>
<li>You need to import StageFactory class - import com.epam.edp.stages.StageFactory</li>
<li>You have to define context Map &ndash; context = [:]</li>
<li>You have to define stagesFactory instance and load EDP stages:</li>
<code>
&nbsp;&nbsp;context.factory = new StageFactory(script: this)<br/>
&nbsp;&nbsp;context.factory.loadEdpStages().each() { context.factory.add(it) }<br/>
</code>
<li>After that you are able to run any EDP stage beforehand defining requirement context</li>
<code>context.factory.getStage("checkout","maven","application").run(context)</code>
</ul>
<p>&nbsp;</p>
<p><strong>For instance pipeline can looks like:</strong></p>
<p>&nbsp;</p>
<code>
@Library(['edp-library-stages']) _<br />
&nbsp;<br />
import com.epam.edp.stages.StageFactory<br />
import org.apache.commons.lang.RandomStringUtils<br />
&nbsp;<br />
context = [:]<br />
&nbsp;<br />
node('maven') {<br />
&nbsp; &nbsp; context.workDir = new File("/tmp/${RandomStringUtils.random(10, true, true)}")<br />
&nbsp;&nbsp;&nbsp; context.workDir.deleteDir()<br />
&nbsp;<br />
&nbsp; &nbsp; context.factory = new StageFactory(script: this)<br />
&nbsp;&nbsp;&nbsp; context.factory.loadEdpStages().each() { context.factory.add(it) }<br />
&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp; context.git = [:]<br />
&nbsp;&nbsp;&nbsp; context.application = [:]<br />
&nbsp;&nbsp;&nbsp; context.application.config = [:]<br />
&nbsp;&nbsp;&nbsp; context.buildTool = [:]<br />
&nbsp;&nbsp;&nbsp; context.nexus = [:]<br />
&nbsp;&nbsp;&nbsp;<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp; stage("checkout") {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.git.branch = "master"<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; context.git.credentialsId = "jenkins"<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; context.application.config.cloneUrl = "ssh://jenkins@gerrit:32092/sit-718-cloned-java-maven-project"<br />
&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;context.factory.getStage("checkout","maven","application").run(context)<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp; stage("compile") {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.buildTool.command = "mvn"<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; context.nexus.credentialsId = "nexus"<br />
&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;context.factory.getStage("compile","maven","application").run(context)<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
</code>
<p>&nbsp;</p>
<p><strong>Or in Declarative way:</strong></p>
<code>
@Library(['edp-library-stages']) _<br />
&nbsp;<br />
import com.epam.edp.stages.StageFactory<br />
import org.apache.commons.lang.RandomStringUtils<br />
&nbsp;<br />
context = [:]<br />
&nbsp;<br />
pipeline {<br />
&nbsp;&nbsp;&nbsp; agent { label 'maven' }<br />
&nbsp;&nbsp;&nbsp; stages {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stage('Init'){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; steps {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; script {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.workDir = new File("/tmp/${RandomStringUtils.random(10, true, true)}")<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.workDir.deleteDir()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.factory = new StageFactory(script: this)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.factory.loadEdpStages().each() { context.factory.add(it) }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.git = [:]<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.application = [:]<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.application.config = [:]<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.buildTool = [:]<br />
&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.nexus = [:]<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stage("Checkout") {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; steps {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; script {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.git.branch = "master"<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.git.credentialsId = "jenkins"<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.application.config.cloneUrl = "ssh://jenkins@gerrit:32092/sit-718-cloned-java-maven-project"<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.factory.getStage("checkout","maven","application").run(context)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stage('Compile') {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; steps {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; script {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.buildTool.command = "mvn"<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.nexus.credentialsId = "nexus"<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.factory.getStage("compile","maven","application").run(context)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }<br />
}<br />
</code>
